package account

import (
	"context"
	"fmt"

	"mmesh.dev/m-api-go/grpc/resources/iam"
	"mmesh.dev/m-cli/pkg/client/iam/user/credentials"
	// user_output "mmesh.dev/m-cli/pkg/client/iam/user/output"
	"mmesh.dev/m-cli/pkg/grpc"
	"mmesh.dev/m-cli/pkg/input"
	"mmesh.dev/m-cli/pkg/output"
	"mmesh.dev/m-cli/pkg/status"
)

func (api *API) SetAdmin() {
	a := GetAccount()

	Output().Admin(fetchAccount())

	if !input.GetConfirm("Edit account admin now?", false) {
		fmt.Println()
		return
	}

	nxc, grpcConn := grpc.GetControllerProviderAPIClient(true)
	defer grpcConn.Close()

	u, err := nxc.GetAccountAdmin(context.TODO(), a)
	if err != nil {
		status.Error(err, "Unable to get admin account details")
	}

	if len(u.AccountID) == 0 {
		u.AccountID = a.AccountID
	}

	fmt.Println()

	u.NewEmail = input.GetInput("Email:", "", u.Email, input.ValidEmail)

	if len(u.Email) == 0 {
		u.Email = u.NewEmail
		u.NewEmail = ""
	} else {
		if u.Email == u.NewEmail {
			u.NewEmail = ""
		}
	}

	u.Username = input.GetInput("Username:", "", u.Username, input.ValidID)

	if u.Credentials == nil {
		u.Credentials = &iam.UserCredentials{}
	}

	pw := credentials.SetCredentialsPassword(false)

	if len(pw) > 0 {
		u.Credentials.Password = pw
	}

	u = credentials.SetSSHKeys(u, false)

	if u.Credentials.TOTP == nil {
		u.Credentials.TOTP = &iam.TOTP{}
	}
	u.Credentials.TOTP = credentials.SetCredentialsTOTP(u)

	if u.Status == nil {
		u.Status = &iam.UserStatus{}
	}

	s := output.Spinner()

	_, err = nxc.SetAccountAdmin(context.TODO(), u)
	if err != nil {
		status.Error(err, "Unable to edit account admin")
	}

	s.Stop()

	Output().Admin(fetchAccount())
	// user_output.ShowUser(u)
}
