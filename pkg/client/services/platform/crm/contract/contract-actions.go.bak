package pro

import (
	"context"

	"mmesh.dev/m-cli/pkg/grpc"
	"mmesh.dev/m-cli/pkg/output"
	"mmesh.dev/m-cli/pkg/status"
)

func (api *API) Confirm() {
	sc := GetServiceContract(true)

	nxc, grpcConn := grpc.GetServicesAPIClient(true)
	defer grpcConn.Close()

	s := output.Spinner()

	sc, err := nxc.ConfirmServiceContract(context.TODO(), sc)
	if err != nil {
		status.Error(err, "Unable to confirm service")
	}

	s.Stop()

	Output().Show(sc)
}

func (api *API) Activate() {
	sc := GetServiceContract(false)

	nxc, grpcConn := grpc.GetServicesAPIClient(true)
	defer grpcConn.Close()

	s := output.Spinner()

	sc, err := nxc.ActivateServiceContract(context.TODO(), sc)
	if err != nil {
		status.Error(err, "Unable to activate service contract")
	}

	s.Stop()

	Output().Show(sc)
}

func (api *API) Reject() {
	sc := GetServiceContract(false)

	nxc, grpcConn := grpc.GetServicesAPIClient(true)
	defer grpcConn.Close()

	s := output.Spinner()

	sc, err := nxc.RejectServiceContract(context.TODO(), sc)
	if err != nil {
		status.Error(err, "Unable to reject service contract")
	}

	s.Stop()

	Output().Show(sc)
}

func (api *API) Cancel(providerAccount bool) {
	sc := GetServiceContract(providerAccount)

	nxc, grpcConn := grpc.GetServicesAPIClient(true)
	defer grpcConn.Close()

	s := output.Spinner()

	sr, err := nxc.CancelServiceContract(context.TODO(), sc)
	if err != nil {
		status.Error(err, "Unable to cancel service contract")
	}

	s.Stop()

	output.Show(sr)
}

func (api *API) Finalize(providerAccount bool) {
	sc := GetServiceContract(providerAccount)

	nxc, grpcConn := grpc.GetServicesAPIClient(true)
	defer grpcConn.Close()

	s := output.Spinner()

	sr, err := nxc.FinalizeServiceContract(context.TODO(), sc)
	if err != nil {
		status.Error(err, "Unable to finalize service contract")
	}

	s.Stop()

	output.Show(sr)
}
