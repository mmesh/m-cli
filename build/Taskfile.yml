version: "3"

includes:
  golang:
    taskfile: ./build/_deps/taskfiles/build/golangTasks.yml
    optional: true
  docker:
    taskfile: ./build/_deps/taskfiles/build/dockerTasks.yml
    optional: true

silent: true

vars:
  NAME: m-cli
  ORG: mmesh
  DOMAIN: mmesh.dev
  PROJECT: mmesh
  GITHUB_PKG: "github.com/{{.ORG}}/{{.NAME}}"
  PREFIX:
    sh: pwd
  PROJECT_DIR: "{{.PREFIX}}/.."
  DIST_DIR: "{{.PREFIX}}/_dist"
  PKG_REPO: "mmesh"
  PKG_REPO_DEV: "mmesh-dev"
  # GS_BUCKET: 'gs://mmesh-io'
  # S3_BUCKET: 'nl-ams_scaleway:mmesh'
  S3_BUCKET: "r2_cloudflare:mmesh"

env:
  PKG: "{{.DOMAIN}}/{{.PROJECT}}"
  VERSION_DATE:
    sh: date -u +%Y%m%d%H%M%S
  # GO_VERSION:
  #   sh: go version | cut -f 3 -d ' '
  # GO111MODULE: on
  # CGO_ENABLED: 0
  # GOPRIVATE: mmesh.dev/m-api-go,mmesh.dev/m-lib
  GITHUB_TOKEN:
    sh: |
      if [[ -f $HOME/.cloud/github/github_token.mmeshbot ]]; then
        cat $HOME/.cloud/github/github_token.mmeshbot;
      else
        echo "${GITHUB_TOKEN}";
      fi
  DOCKER_USER:
    sh: |
      if [[ -f $HOME/.cloud/docker/docker.x6a ]]; then
        awk '/user/ {print $2}' $HOME/.cloud/docker/docker.x6a;
      else
        echo "${DOCKER_USER}";
      fi
  DOCKER_PASSWORD:
    sh: |
      if [[ -f $HOME/.cloud/docker/docker.x6a ]]; then
        awk '/pw/ {print $2}' $HOME/.cloud/docker/docker.x6a;
      else
        echo "${DOCKER_PASSWORD}";
      fi
  COSIGN_PWD:
    sh: |
      if [[ -f $HOME/.x6a/mmesh/cosign/pw.txt ]]; then
        cat $HOME/.x6a/mmesh/cosign/pw.txt;
      else
        echo "${COSIGN_PWD}";
      fi
  DISCORD_WEBHOOK_ID:
    sh: |
      if [[ -f $HOME/.cloud/discord/mmeshbot-announcements.webhook ]]; then
        awk '/webhook_id/ {print $2}' $HOME/.cloud/discord/mmeshbot-announcements.webhook;
      else
        echo "${DISCORD_WEBHOOK_ID}";
      fi
  DISCORD_WEBHOOK_TOKEN:
    sh: |
      if [[ -f $HOME/.cloud/discord/mmeshbot-announcements.webhook ]]; then
        awk '/webhook_token/ {print $2}' $HOME/.cloud/discord/mmeshbot-announcements.webhook;
      else
        echo "${DISCORD_WEBHOOK_TOKEN}";
      fi
  TWITTER_CONSUMER_KEY:
    sh: |
      if [[ -f $HOME/.cloud/twitter/mmesh_io ]]; then
        awk '/api_key/ {print $2}' $HOME/.cloud/twitter/mmesh_io;
      else
        echo "${TWITTER_CONSUMER_KEY}";
      fi
  TWITTER_CONSUMER_SECRET:
    sh: |
      if [[ -f $HOME/.cloud/twitter/mmesh_io ]]; then
        awk '/api_secret/ {print $2}' $HOME/.cloud/twitter/mmesh_io;
      else
        echo "${TWITTER_CONSUMER_SECRET}";
      fi
  TWITTER_ACCESS_TOKEN:
    sh: |
      if [[ -f $HOME/.cloud/twitter/mmesh_io ]]; then
        awk '/access_token/ {print $2}' $HOME/.cloud/twitter/mmesh_io;
      else
        echo "${TWITTER_ACCESS_TOKEN}";
      fi
  TWITTER_ACCESS_TOKEN_SECRET:
    sh: |
      if [[ -f $HOME/.cloud/twitter/mmesh_io ]]; then
        awk '/access_secret/ {print $2}' $HOME/.cloud/twitter/mmesh_io;
      else
        echo "${TWITTER_ACCESS_TOKEN_SECRET}";
      fi

tasks:
  deps:
    desc: Install build dependencies.
    cmds:
      - rm -rf ./build/_deps
      - git clone --depth 1 git@github.com:x6a/scripts.git ./build/_deps/scripts
      - git clone --depth 1 git@github.com:x6a/taskfiles.git ./build/_deps/taskfiles

  test-mods:
    desc: Test vendor modules.
    cmds:
      - task: golang:go-verify-vendor
      - task: golang:go-generate
      - task: golang:go-fmt
      # - task: golang:go-vet
      # - task: golang:golangci-lint

  _goreleaser:
    deps: [test-mods]
    cmds:
      - goreleaser {{.CMD}} -f build/ci/goreleaser/release.yml --clean {{.OPTS}}

  test-cli:
    desc: Test build the cli binary.
    cmds:
      - task: _goreleaser
        vars:
          CMD: build
          OPTS: --snapshot

  build-all:
    desc: Build all binaries.
    cmds:
      - task: _build-cli

  build-cli:
    desc: Build the cli binary.
    cmds:
      - task: _goreleaser
        vars:
          CMD: release
          OPTS: --snapshot

  docker-push-cli-dev:
    desc: docker push -- mmesh-cli (dev build)
    cmds:
      - task: docker:docker-login
      - docker push mmeshdev/mmeshctl:snapshot
      - docker push mmeshdev/mmeshctl:dev
      - task: docker:ghcr-login
      - docker push ghcr.io/mmesh/mmeshctl:snapshot
      - docker push ghcr.io/mmesh/mmeshctl:dev
      - task: docker:image-scan
        vars: { IMAGE: "mmeshctl", REPO: "mmeshdev", TAG: "dev" }

  publish-binaries-dev:
    desc: Publish binaries (dev build)
    dir: "{{.PREFIX}}"
    vars:
      VERSION:
        sh: svu current
    cmds:
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli_*_amd64.deb '{{.PKG_REPO_DEV}}'
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli_*_arm64.deb '{{.PKG_REPO_DEV}}'
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli-*.x86_64.rpm '{{.PKG_REPO_DEV}}'
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli-*.aarch64.rpm '{{.PKG_REPO_DEV}}'
      - ./build/_deps/scripts/_local/build/release.sh '{{.VERSION}}' '{{.DIST_DIR}}' '{{.S3_BUCKET}}' 'dev'

  publish-binaries-stable:
    desc: Publish binaries (stable build)
    dir: "{{.PREFIX}}"
    vars:
      VERSION:
        sh: svu current
    cmds:
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli_*_amd64.deb '{{.PKG_REPO}}'
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli_*_arm64.deb '{{.PKG_REPO}}'
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli-*.x86_64.rpm '{{.PKG_REPO}}'
      - ./build/_deps/scripts/_local/build/pkg-upload.sh {{.DIST_DIR}}/mmesh-cli-*.aarch64.rpm '{{.PKG_REPO}}'
      - ./build/_deps/scripts/_local/build/release.sh '{{.VERSION}}' '{{.DIST_DIR}}' '{{.S3_BUCKET}}' 'stable'

  publish-all-dev:
    desc: Publish docker images and binaries (dev build)
    cmds:
      - task: docker-push-cli-dev
      - task: publish-binaries-dev

  publish-all-stable:
    desc: Publish binaries (stable build)
    cmds:
      - task: publish-binaries-stable

  release:
    desc: Build and release all the packages.
    vars:
      NEXT_VERSION:
        sh: svu next
    cmds:
      - echo "Executing git tag with {{.NEXT_VERSION}}..."
      - git tag -sa {{.NEXT_VERSION}} -m "{{.NEXT_VERSION}}"
      - echo "Running git push origin {{.NEXT_VERSION}} to push new tag to GitHub..."
      - git push origin {{.NEXT_VERSION}}
      - task: docker:docker-login
      # - task: docker:ghcr-login
      - task: _goreleaser
        vars:
          CMD: release
          OPTS: ""
      - task: docker:image-scan
        vars: { IMAGE: "mmeshctl", REPO: "mmeshdev", TAG: "stable" }
      - task: publish-all-stable
      # - ./scripts/_local/build/gh-tag-delete.sh '{{.VERSION}}'

  clean:
    desc: Clean everything.
    deps: [golang:go-clean, docker:docker-images-clean]
    cmds:
      - echo 'Cleaning dist working directory...'
      - rm -rf {{.DIST_DIR}}
